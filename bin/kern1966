#!/usr/bin/env fontforge
# -*- mode: python; coding: utf-8 -*-

import fontforge
import json
import os

# dataJson = open("data/data.json", "r").read()
# data = (json.loads(dataJson))
kernData = json.loads(open("data/1966.json", "r").read())
kerningClassesDict = kernData["kerningClasses"]
spacingIndexesByKerningClass = kerningClassesDict["spacingIndexesByKerningClass"]
charStringsByPrecedingClass = kerningClassesDict["preceding"]
charStringsByFollowingClass = kerningClassesDict["following"]
unitBasis = kernData["unitBasis"]   # e.g., 8 (4 for year 2000 metrics)
strokeWidths = kernData["strokeWidthsBySeries"]

spaceWidthData = json.loads(open("data/spaces.json", "r").read())
spaceWidths = spaceWidthData["OC Highway VAR"]
spaceWidthBasis = spaceWidthData["basis"]

def setKerningPairs(filename, seriesName):
    spacings = kernData["spacingsBySeries"][seriesName]
    font = fontforge.open(filename)
    unit = font.capHeight / unitBasis # e.g., 96 (font.capHeight = 768; unitBasis = 8)
    strokeWidth = strokeWidths[seriesName] # e.g., 

    try:
        font.removeLookupSubtable("kern-1")
    except OSError as e:
        if str(e) == "No subtable named kern-1 exists":
            pass
        else:
            raise
    try:
        font.removeLookup("kern")
    except OSError as e:
        if str(e) == "No lookup named kern exists":
            pass
        else:
            raise
    font.addLookup("kern", "gpos_pair", None, (("kern", (("DFLT", ("dflt")),("latn", ("dflt")),)),))

    precedingClassList = list([x for x in charStringsByPrecedingClass])
    followingClassList = list([x for x in charStringsByFollowingClass])

    precedingClassDict = {}
    followingClassDict = {}
    for precedingClass in precedingClassList: # "p1", ...
        for char in charStringsByPrecedingClass[precedingClass]:
            precedingClassDict[char] = precedingClass
    for followingClass in followingClassList: # "f1", ...
        for char in charStringsByFollowingClass[followingClass]:
            followingClassDict[char] = followingClass

    rightSideBearingsByPrecedingClass = {}
    leftSideBearingsByFollowingClass = {}

    # default lsb/rsb, in case we forget to set those for any particular character, use H-H spacing.
    hPrecedingClass = precedingClassDict["H"]
    hFollowingClass = followingClassDict["H"]
    bearing = int(round(unit * spacings[spacingIndexesByKerningClass[precedingClass + followingClass]] / 2))
    for char in font:
        font[char].left_side_bearing = bearing
        font[char].right_side_bearing = bearing

    # set width of space
    font[32].width = 0
    font[32].left_side_bearing = int(round(spaceWidths[seriesName] / spaceWidthBasis * font.capHeight))
    font[32].right_side_bearing = int(round(spaceWidths[seriesName] / spaceWidthBasis * font.capHeight))

    # set the right side bearing of all characters in a class.
    def setRightSideBearings(precedingClass, followingClasses, using = None):
        bearing = 0
        for followingClass in followingClasses:
            bearing += spacings[spacingIndexesByKerningClass[precedingClass + followingClass]]
        bearing = bearing / len(followingClasses)
        bearing = int(round(unit * bearing / 2))
        for precedingChar in charStringsByPrecedingClass[precedingClass]:
            font[ord(precedingChar)].right_side_bearing = bearing
        rightSideBearingsByPrecedingClass[precedingClass] = bearing

    # set the left side bearing of all characters in a class.
    def setLeftSideBearings(followingClass, precedingClasses, using = None):
        bearing = 0
        if using is not None:
            precedingClass = precedingClassDict[using]
            followingClass = followingClassDict[using]
            bearing += spacings[spacingIndexesByKerningClass[precedingClass + followingClass]]
            bearing = bearing / len(precedingClasses)
            bearing = int(round(unit * bearing / 2))
        else:
            for precedingClass in precedingClasses:
                bearing += spacings[spacingIndexesByKerningClass[precedingClass + followingClass]]
            bearing = bearing / len(precedingClasses)
            bearing = int(round(unit * bearing / 2))
        for followingChar in charStringsByFollowingClass[followingClass]:
            font[ord(followingChar)].left_side_bearing = bearing
        leftSideBearingsByFollowingClass[followingClass] = bearing

    # Set inital bearings.  You can use any values because we will use
    # kerning pairs to set the final inter-letter spacing.  The goals
    # are (1) as few kerning pairs as possible and (2) symmetric
    # letters have the same left and right side bearings.
    for setBearingsItem in kernData["setBearings"]:
        side = setBearingsItem["side"]
        left = setBearingsItem["left"]
        right = setBearingsItem["right"]
        if "using" in setBearingsItem:
            if side == "right":
                setRightSideBearings(left, right, using=setBearingsItem["using"])
            elif side == "left":
                setLeftSideBearings(right, left, using=setBearingsItem["using"])
        else:
            if side == "right":
                setRightSideBearings(left, right)
            elif side == "left":
                setLeftSideBearings(right, left)

    # kerning pairs
    for precedingClass in precedingClassList:     # "p1", ...
        for followingClass in followingClassList: # "f1", ...
            kerningClass = precedingClass + followingClass # "p1f1", ..., but could be anything
            spacingIndex = precedingClass + followingClass # "p1f1", ...
            spacingCode = spacingIndexesByKerningClass[spacingIndex] # 1, 2, ...
            spacing = int(round(spacings[spacingIndexesByKerningClass[precedingClass + followingClass]] * unit))
            spacing = spacing - rightSideBearingsByPrecedingClass[precedingClass]
            spacing = spacing - leftSideBearingsByFollowingClass[followingClass]
            if spacing < -1 or spacing > 1: # fudge factor
                precedingChars = list([x for x in charStringsByPrecedingClass[precedingClass]]) # ['0', ...]
                followingChars = list([x for x in charStringsByFollowingClass[followingClass]])
                precedingCharNames = tuple([font[ord(c)].glyphname for c in precedingChars]) # ("zero", ...)
                followingCharNames = tuple([font[ord(c)].glyphname for c in followingChars])
                precedingTuple = (None, precedingCharNames) # seems like a bug that I have to prepend None.
                followingTuple = (None, followingCharNames) # ditto.
                spacingTuple = tuple([spacing] * len(precedingTuple) * len(followingTuple))
                font.addKerningClass("kern", kerningClass, precedingTuple, followingTuple, spacingTuple)
    if os.path.splitext(filename)[1] == ".sfd":
        font.save(filename)
    else:
        font.generate(filename)

setKerningPairs("src/series-a.sfd", "Series A")
setKerningPairs("src/series-b.sfd", "Series B")

# feature-script-lang tuple
