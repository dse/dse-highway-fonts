#!/usr/bin/env fontforge
# -*- mode: python; coding: utf-8 -*-

import fontforge
import json
import os

dataJson = open("data/data.json", "r").read()
data = json.loads(dataJson)
data1966 = data["1966"]
kerningClasses = data1966["kerningClasses"]
preceding = kerningClasses["preceding"]
following = kerningClasses["following"]
pairIndexes = kerningClasses["pairs"]
unitBasis = data1966["unitBasis"]   # e.g., 8 (4 for year 2000 metrics)
strokeWidths = data1966["strokeWidth"]
spaceWidths = data["spaceWidth"]["OC Highway VAR"]
spaceWidthBasis = data["spaceWidth"]["basis"]

def setKerningPairs(filename, seriesName):
    spacings = data1966["spacing"][seriesName]
    font = fontforge.open(filename)
    unit = font.capHeight / unitBasis
    strokeWidth = strokeWidths[seriesName] # e.g., 0.75
    for char in font:
        font[char].left_side_bearing = int(round(strokeWidth * 0.75))
        font[char].right_side_bearing = int(round(strokeWidth * 0.75))
    try:
        font.removeLookupSubtable("kern-1")
    except OSError as e:
        if str(e) == "No subtable named kern-1 exists":
            pass
        else:
            raise
    try:
        font.removeLookup("kern")
    except OSError as e:
        if str(e) == "No lookup named kern exists":
            pass
        else:
            raise
    font.addLookup("kern", "gpos_pair", None, (("kern", (("DFLT", ("dflt")),("latn", ("dflt")),)),))

    # set width of space
    font[32].width = 0
    font[32].left_side_bearing = int(0)
    font[32].right_side_bearing = int(round(spaceWidths[seriesName] / spaceWidthBasis * font.capHeight))

    precedingDict = kerningClasses["preceding"]
    followingDict = kerningClasses["following"]
    precedingClassNames = list(filter(lambda x: x != "", [x for x in precedingDict]))
    followingClassNames = list(filter(lambda x: x != "", [x for x in followingDict]))

    for precedingClass in precedingClassNames: # "p1", ...
        for followingClass in followingClassNames: # "f1", ...
            kerningClassName = precedingClass + followingClass
            spacingIndex = precedingClass + followingClass # "p1f1", ...
            spacingCode = pairIndexes[spacingIndex]        # 1, 2, ...
            spacing = int(round(unit * spacings[spacingCode]))
            precedingChars = list([x for x in precedingDict[precedingClass]]) # ['0', ...]
            followingChars = list([x for x in followingDict[followingClass]])
            precedingCharNames = tuple([font[ord(c)].glyphname for c in precedingChars]) # ("zero", ...)
            followingCharNames = tuple([font[ord(c)].glyphname for c in followingChars])
            precedingTuple = (None, precedingCharNames) # seems like a bug that I have to prepend None.
            followingTuple = (None, followingCharNames) # ditto.
            spacingTuple = tuple([spacing] * len(precedingTuple) * len(followingTuple))
            font.addKerningClass("kern", kerningClassName, precedingTuple, followingTuple, spacingTuple)
    if os.path.splitext(filename)[1] == ".sfd":
        font.save(filename)
    else:
        font.generate(filename)

setKerningPairs("src/series-a.sfd", "Series A")
setKerningPairs("src/series-b.sfd", "Series B")

# feature-script-lang tuple
