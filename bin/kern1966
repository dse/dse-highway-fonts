#!/usr/bin/env fontforge
# -*- mode: python; coding: utf-8 -*-

import fontforge
import json
import os

kernData = json.loads(open("data/1966.json", "r").read())
spaceWidthData = json.loads(open("data/spaces.json", "r").read())

unitBasis = kernData["unitBasis"]   # e.g., 8 (4 for year 2000 metrics)
kerningClassesData = kernData["kerningClasses"]
spacingCodesByKerningClass = kerningClassesData["spacingCodesByKerningClass"]
charStringsByPrecedingClass = kerningClassesData["preceding"]
charStringsByFollowingClass = kerningClassesData["following"]
strokeWidths = kernData["strokeWidthsBySeries"]
precedingClassList = list([x for x in charStringsByPrecedingClass])
followingClassList = list([x for x in charStringsByFollowingClass])
precedingClassByChar = {}
followingClassByChar = {}
for pc in precedingClassList: # "p1", ...
    for char in charStringsByPrecedingClass[pc]:
        precedingClassByChar[char] = pc
for fc in followingClassList: # "f1", ...
    for char in charStringsByFollowingClass[fc]:
        followingClassByChar[char] = fc
spaceWidths = spaceWidthData["OC Highway VAR"]
spaceWidthBasis = spaceWidthData["basis"]

def setKerningPairs(filename, seriesName):
    spacings = kernData["spacingsBySeries"][seriesName]
    font = fontforge.open(filename)
    unit = font.capHeight / unitBasis # e.g., 96 (font.capHeight = 768; unitBasis = 8)
    strokeWidth = strokeWidths[seriesName]
    try:
        font.removeLookup("kern")
    except OSError as e:
        if str(e) == "No lookup named kern exists":
            pass
        else:
            raise
    font.addLookup("kern", "gpos_pair", None, (("kern", (("DFLT", ("dflt")),("latn", ("dflt")),)),))
    def setDefaultBearing():
        char = "H"
        pc = precedingClassByChar[char]
        fc = followingClassByChar[char]
        kc = pc + fc
        bearing = spacings[spacingCodesByKerningClass[kc]] / 2
        for char in font:
            font[char].left_side_bearing = int(round(bearing * unit))
            font[char].right_side_bearing = int(round(bearing * unit))
    def setSpaceWidth():
        font[32].width = 0
        font[32].left_side_bearing = 0
        font[32].right_side_bearing = int(round(spaceWidths[seriesName] / spaceWidthBasis * font.capHeight))
    setDefaultBearing()
    setSpaceWidth()

    # Set the right side bearing of all characters in a preceding
    # character class.  Value will be based on the average of spacings
    # with characters in fcs.
    def setRightSideBearings(pc, fcs):
        bearing = 0
        for fc in fcs:
            bearing += spacings[spacingCodesByKerningClass[pc + fc]] / 2
        bearing = bearing / len(fcs)
        str = charStringsByPrecedingClass[pc]
        for char in str:
            font[ord(char)].right_side_bearing = round(int(bearing * unit))
        for fc in followingClassList:
            rightSideBearingsByKerningClass[pc + fc] = bearing

    rightSideBearingsByKerningClass = {}
    leftSideBearingsByKerningClass = {}

    # Set the left side bearing of all characters in a following
    # character class.  Value will be based on the average of spacings
    # with characters in pcs.
    def setLeftSideBearings(fc, pcs):
        bearing = 0
        for pc in pcs:
            bearing += spacings[spacingCodesByKerningClass[pc + fc]] / 2
        bearing = bearing / len(pcs)
        str = charStringsByFollowingClass[fc]
        for char in str:
            font[ord(char)].left_side_bearing = round(int(bearing * unit))
        for pc in precedingClassList:
            leftSideBearingsByKerningClass[pc + fc] = bearing

    # Set inital bearings.  You can use any values because we will use
    # kerning pairs to set the final inter-letter spacing.  The goals
    # are (1) as few kerning pairs as possible and (2) symmetric
    # letters have the same left and right side bearings.  Neither is
    # absolutely necessary.
    #
    # Note: we CANNOT specify left and right side bearings on
    # individual characters.  This would cause kerning pairs to be
    # wonky if one of the characters has its "own" lsb or rsb.
    for setBearingsItem in kernData["setBearings"]:
        side = setBearingsItem["side"]
        left = setBearingsItem["left"]
        right = setBearingsItem["right"]
        if side == "right":
            setRightSideBearings(left, right)
        elif side == "left":
            setLeftSideBearings(right, left)

    # kerning pairs
    for pc in precedingClassList:     # "p1", ...
        for fc in followingClassList: # "f1", ...
            kc = pc + fc # "p1f1", ..., but could be anything
            spacing = spacings[spacingCodesByKerningClass[kc]]
            rsb = rightSideBearingsByKerningClass[kc]
            lsb = leftSideBearingsByKerningClass[kc]
            spacing = spacing - rsb - lsb
            spacingByUnit = int(round(spacing * unit))
            if True: # must add all kerning pairs otherwise things get wonky
                pcs = list(charStringsByPrecedingClass[pc])
                fcs = list(charStringsByFollowingClass[fc])
                precedingGlyphNames = tuple([font[ord(c)].glyphname for c in pcs]) # ("zero", ...)
                followingGlyphNames = tuple([font[ord(c)].glyphname for c in fcs])
                precedingTuple = (None, precedingGlyphNames) # Prepending None is a workaround
                followingTuple = (None, followingGlyphNames) # for a bug.
                spacingTuple = tuple([int(round(spacing * unit))] * len(precedingTuple) * len(followingTuple))
                font.addKerningClass("kern", kc, precedingTuple, followingTuple, spacingTuple)
    if os.path.splitext(filename)[1] == ".sfd":
        font.save(filename)
    else:
        font.generate(filename)

setKerningPairs("src/series-a.sfd", "Series A")
setKerningPairs("src/series-b.sfd", "Series B")
